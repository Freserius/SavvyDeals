

window.addEventListener('load', function() {
    const header = document.querySelector('header');
    const main = document.querySelector('main');
  
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    function adjustMainMargin() {
      const headerHeight = header.offsetHeight;
      main.style.marginTop = `${headerHeight}px`;
    }
  
    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç—Å—Ç—É–ø –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    adjustMainMargin();
  
    // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—Ç—É–ø –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', adjustMainMargin);
  });
document.addEventListener("DOMContentLoaded", () => {
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const loginForm = document.getElementById("login-form");
    if (loginForm) {
        loginForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const email = document.getElementById("email").value;
            const password = document.getElementById("password").value;

            try {
                const response = await fetch('/login', {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ email, password }),
                });

                if (!response.ok) {
                    const error = await response.json();
                    alert(error.message);
                    return;
                }

                const result = await response.json();
                alert(result.message);
                window.location.href = "/";
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
            }
        });
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    const registerForm = document.getElementById("register-form");
    if (registerForm) {
        registerForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const name = document.getElementById("name").value;
            const email = document.getElementById("email").value;
            const password = document.getElementById("password").value;

            try {
                const response = await fetch("/register", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ name, email, password }),
                });

                if (!response.ok) {
                    const error = await response.json();
                    alert(error.message);
                    return;
                }

                const result = await response.json();
                alert(result.message);
                window.location.href = "/login";
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
            }
        });
    }

    // –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    const feedbackForm = document.getElementById("feedback-form");
    if (feedbackForm) {
        feedbackForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const email = document.getElementById("email").value;
            const message = document.getElementById("message").value;

            try {
                const response = await fetch("/feedback", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ email, message }),
                });

                if (!response.ok) {
                    const error = await response.json();
                    alert(error.message);
                    return;
                }

                const result = await response.json();
                alert(result.message);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:", error);
            }
        });
    }

    const logoutButton = document.getElementById("logout-button");
    if (logoutButton) {
        logoutButton.addEventListener("click", async () => {
            const response = await fetch("/logout");
            window.location.href = "/";
        });
    }
    const contentContainer = document.getElementById('standerd-info');
    const statLink = document.getElementById('stat-link');
    const infoLink = document.getElementById('info-link');
    const opinionLink = document.getElementById('opinion-link');
    const legalEntitySelect = document.getElementById('legal-entity-select');
    const statChangesContainer = document.getElementById('stat-changes-container');
    const filterContainer = document.getElementById('filter-container');
    const categoriesS = {
        "–ö—Ä–∞–π–Ω–µ –≤—ã–≥–æ–¥–Ω—ã–µ": document.getElementById('extremely-profitable'),
        "–í—ã–≥–æ–¥–Ω—ã–µ": document.getElementById('profitable'),
        "–ù–µ–≤—ã–≥–æ–¥–Ω—ã–µ": document.getElementById('unprofitable'),
        "–ö—Ä–∞–π–Ω–µ –Ω–µ–≤—ã–≥–æ–¥–Ω—ã–µ": document.getElementById('extremely-unprofitable')
    };



    const filtersContainer = document.createElement('div');
    filtersContainer.id = 'filters-container';

    const createSelectFilter = (id, label, options) => {
        const container = document.createElement('div');
        container.className = 'filter-item';

        const selectLabel = document.createElement('label');
        selectLabel.textContent = label;
        selectLabel.setAttribute('for', id);

        const select = document.createElement('select');
        select.id = id;
        select.innerHTML = `<option value="">–í—Å–µ</option>`;
        options.forEach(option => {
            const opt = document.createElement('option');
            opt.value = option;
            opt.textContent = option;
            select.appendChild(opt);
        });

        container.appendChild(selectLabel);
        container.appendChild(select);
        return container;
    };

    const sortState = {
        discount: 'none', // 0 - –Ω–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, 1 - –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, 2 - –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        quality: 'none', // 0 - –Ω–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ, 1 - –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, 2 - –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const sortData = (data, columnIndex, state) => {
        return data.sort((a, b) => {
            let valA = a[columnIndex];
            let valB = b[columnIndex];

            if (state === 'asc') {
                return valA > valB ? 1 : -1;
            } else if (state === 'desc') {
                return valA < valB ? 1 : -1;
            }
            return 0;
        });
    };
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
    const generateTable = (data) => {
        const table = document.createElement('table');
        table.className = 'discount-table';

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        const thead = document.createElement('thead');
        thead.innerHTML = `
            <tr>
                <th>–Æ–† –ª–∏—Ü–æ</th>
                <th>–¢–∏–ø —Ç–æ–≤–∞—Ä–∞</th>
                <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –∫–∞—Ä—Ç</th>
                <th>
                    –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ %
                    <span class="sort-arrow" id="discount-sort">‚Üï</span>
                </th>
                <th>
                    –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
                    <span class="sort-arrow" id="quality-sort">‚Üï</span>
                </th>
            </tr>
        `;
        table.appendChild(thead);

        // –¢–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã
        const tbody = document.createElement('tbody');
        data.forEach(item => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td><a href="https://yandex.ru/search/?text=${item[0]}" target="_blank">${item[0]}</a></td>
                <td>${item[1]}</td>
                <td>${item[2]}</td>
                <td>${item[3]}</td>
                <td>${item[4] === null ? "..." : item[4]}</td>
                <td>
                <button class="opinion-button" data-legal-entity="${item[0]}">
                    üìù
                </button>
                </td>
            `;
            tbody.appendChild(tr);
        });
        table.appendChild(tbody);

        return table;
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–Ω–µ–Ω–∏—è
    document.addEventListener('click', (event) => {
        if (event.target && event.target.classList.contains('opinion-button')) {
            const legalEntity = event.target.getAttribute('data-legal-entity');
            // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Ñ–æ—Ä–º—É —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö
            window.location.href = `/leave_opinion?legal_entity=${legalEntity}`;
        }
    });

    const applyFilters = (data) => {
        const selectedLegalEntity = document.getElementById('legal-entity-filter').value;
        const selectedCategory = document.getElementById('category-filter').value;
        const selectedHolder = document.getElementById('holder-filter').value;

        return data.filter(item => {
            const matchesLegalEntity = !selectedLegalEntity || item[0] === selectedLegalEntity;
            const matchesCategory = !selectedCategory || item[1].includes(selectedCategory);
            const matchesHolder = !selectedHolder || item[2].includes(selectedHolder);
            return matchesLegalEntity && matchesCategory && matchesHolder;
        });
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏ —Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const toggleVisibility = (showStatChanges = false) => {
        if (showStatChanges) {
            statChangesContainer.style.display = 'flex';
            filterContainer.style.display = 'block';
        } else {
            statChangesContainer.style.display = 'none';
            filterContainer.style.display = 'none';
        }
    };

    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä
    toggleVisibility(false);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ–º–µ
    const loadData = async (url) => {
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${response.statusText}`);
            const data = await response.json();

            // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            contentContainer.innerHTML = '';

            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä
            if (url === '/get_stat_changes' && data.grouped ) {
                toggleVisibility(true);

                // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
                legalEntitySelect.innerHTML = `<option value="">–õ—é–±—ã–µ —Ç–æ–≤–∞—Ä—ã</option>`;
                // const uniqueCategories = [...new Set(Object.values(data.categories))];
                data.categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category;
                    option.textContent = category;
                    legalEntitySelect.appendChild(option);
                });

                const displayData = (selectedCategory = '') => {
                    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
                    Object.values(categoriesS).forEach(column => column.innerHTML = '');
            
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    Object.entries(data.grouped).forEach(([groupName, enterprises]) => {
                        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        const groupColumn = categoriesS[groupName]; 
                        if (groupColumn) {
                            enterprises.forEach(enterprise => {
                                if (selectedCategory === '' || enterprise.Categories.includes(selectedCategory)) {

                                const li = document.createElement('li');
                                li.innerHTML = `<a href="https://yandex.ru/search/?text=${enterprise.LegalEntity}" target="_blank">${enterprise.LegalEntity}</a>`;
                                groupColumn.appendChild(li);
            
                                // –í—ã–≤–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Æ–† –ª–∏—Ü–∞ (–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
                                    // const categories = document.createElement('ul');
                                    // enterprise.Categories.split(',').forEach(category => {
                                    //     const categoryItem = document.createElement('li');
                                    //     categoryItem.textContent = category; // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
                                    //     categories.appendChild(categoryItem);
                                    // });
                                    // li.appendChild(categories);
                                }
                            });
                        }
                    });
                }

                displayData();

                legalEntitySelect.addEventListener('change', (e) => {
                    const selectedCategory = e.target.value;
                    displayData(selectedCategory);
                });
            } else {
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ–º
                toggleVisibility(false);

                if (url === '/get_discount_info') {
                    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
                    const legalEntities = [...new Set(data.map(item => item[0]))];
                    const categories = [...new Set(data.map(item => item[1]))];
                    const holders = [...new Set(data.map(item => item[2]))];

                    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    filtersContainer.innerHTML = '';
                    filtersContainer.appendChild(createSelectFilter('legal-entity-filter', '–Æ–† –ª–∏—Ü–æ:', legalEntities));
                    filtersContainer.appendChild(createSelectFilter('category-filter', '–¢–∏–ø —Ç–æ–≤–∞—Ä–∞:', categories));
                    filtersContainer.appendChild(createSelectFilter('holder-filter', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –∫–∞—Ä—Ç—ã:', holders));
                    contentContainer.appendChild(filtersContainer);

                    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
                    const renderTable = () => {
                        const filteredData = applyFilters(data);
                        const table = generateTable(filteredData);
                        const existingTable = document.querySelector('.discount-table');
                        if (existingTable) existingTable.remove();
                        contentContainer.appendChild(table);
                    };

                    renderTable();

                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                    filtersContainer.querySelectorAll('select').forEach(select => {
                        select.addEventListener('change', renderTable);
                    });



                    const discountSortArrow = document.getElementById("discount-sort");
                    const qualitySortArrow = document.getElementById("quality-sort");
                    const handleSortClick = (column, index) => {
                        if (sortState[column] === 'asc') {
                            sortState[column] = 'desc';
                        } else if (sortState[column] === 'desc') {
                            sortState[column] = 'none';
                        } else {
                            sortState[column] = 'asc';
                        }                        
                        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                        const sortedData = sortData(data, index, sortState[column]);
                        const table = generateTable(sortedData);
                        const existingTable = document.querySelector('.discount-table');
                        if (existingTable) existingTable.remove();
                        contentContainer.appendChild(table);
                    };

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                    discountSortArrow.addEventListener('click', () => handleSortClick('discount', 3));  // –ò–Ω–¥–µ–∫—Å –¥–ª—è "–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏"
                    qualitySortArrow.addEventListener('click', () => handleSortClick('quality', 4));
                    
                }
               
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º
    statLink.addEventListener('click', (e) => {
        e.preventDefault();
        loadData('/get_stat_changes');
    });

    infoLink.addEventListener('click', (e) => {
        e.preventDefault();
        loadData('/get_discount_info');
    });

    // opinionLink.addEventListener('click', (e) => {
    //     e.preventDefault();
    //     loadData('/get_public_opinion');
    // });
});
    

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                    // const sortableHeaders = document.querySelectorAll('span.sort-arrow');
                    // sortableHeaders.forEach(header => {
                    //     header.addEventListener('click', () => {
                    //         const column = header.getAttribute('sort-arrow');
                    //         sortState[column] = sortState[column] === 'asc' ? 'desc' : (sortState[column] === 'desc' ? 'none' : 'asc');

                    //         // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
                    //         const sortedData = sortData(data, column, sortState[column]);
                    //         const table = generateTable(sortedData);
                    //         const existingTable = document.querySelector('.discount-table');
                    //         if (existingTable) existingTable.remove();
                    //         contentContainer.appendChild(table);
                    //     });
                    // });